#!/usr/bin/env ruby
require 'erb'
require 'nokogiri'
require File.dirname(__FILE__) + '/common.rb'
require File.dirname(__FILE__) + '/svd_parser.rb'

if ARGV[0].nil?
  print "Usage: registers.rb [chip-name]\n"
  exit 1
end

chip = ARGV[0]
is_test = chip == 'test'
filename = "data/stm32f#{chip[0..2]}.svd"
filename = 'data/test.svd' if is_test
@doc = File.open(filename) { |f| Nokogiri::XML(f) }
device = Device.new(@doc)

def address(base_address, address_offset)
  '0x' + (as_int(base_address) + as_int(address_offset)).to_s(16)
end

def generate(device)
  tmpl = <<~EOF
    pub const registers = struct {
        <%- for p in device.peripherals -%>
        /// <%= p.desc %>
        pub const <%= p.name %> = struct {
            pub const base_address = <%= p.base_address %>;
            <%- for r in p.registers %>
            /// address: <%= address(p.base_address, r.address_offset) %>
            /// <%= r.desc %>
            <%- case r.type -%>
            <%- when :int -%>
            pub const <%= r.name %> = @intToPtr(*volatile u<%= r.size %>, base_address + <%= r.address_offset %>);
            <%- when :mmio_int -%>
            pub const <%= r.name %> = @intToPtr(*volatile MmioInt(<%= r.size %>, u<%= r.bit_width %>), base_address + <%= r.address_offset %>);
            <%- else -%>
            pub const <%= r.name %> = @intToPtr(*volatile Mmio(<%= r.size %>, packed struct {
                <%- for f in r.fields -%>
                <%= f.name %>: u<%= f.bit_width %>,<%- if f.desc -%> // <%= f.desc %> <%- end %>
                <%- end -%>
            }), base_address + <%= r.address_offset %>);
            <%- end -%>
            <%- end -%>
        };
        <%- end -%>
    };

  EOF
  puts ERB.new(tmpl, trim_mode: '-').result(binding)
end

puts '// this file was generated by cgen/registers.rb'
generate(device)
puts File.read('data/registers_footer.zig') unless is_test

# experiment with zig naming convention for registers
# peripherals.map do |p|
#   p.name.downcase!
#   p.registers.map do |r|
#     r.name.downcase! unless r.name == "OR"
#     r.fields.map { |f| f.name.downcase! unless f.name == "ALIGN" }
#   end
# end
# generate peripherals
