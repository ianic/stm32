#!/usr/bin/env ruby
require 'erb'
require 'json'
require 'nokogiri'
require 'csv'
require File.dirname(__FILE__) + '/common.rb'
require File.dirname(__FILE__) + '/svd_parser.rb'

if ARGV[0].nil?
  print "Usage: registers.rb [chip-name]\n"
  exit 1
end

chip = ARGV[0]
$is_test = chip == "test"
filename = "data/stm32f#{chip[0..2]}.svd"
filename = "data/test.svd" if $is_test
@doc = File.open(filename) { |f| Nokogiri::XML(f) }
device = Device.new(@doc)

#peripherals = SvdParser.new(ARGV[0]).parse
peripherals = device.peripherals

def address(base_address, address_offset)
  "0x" + (as_int(base_address) + as_int(address_offset)).to_s(16)
end


def generate(peripherals)
  tmpl = <<-EOF
pub const registers = struct {
    <%- for p in peripherals -%>
    /// <%= p.desc %>
    pub const <%= p.name %> = struct {
        pub const base_address = <%= p.base_address %>;
        <%- for r in p.registers %>
        /// address: <%= address(p.base_address, r.address_offset) %>
        /// <%= r.desc %>
        <%- case r.type -%>
        <%- when :int -%>
        pub const <%= r.name %> = @intToPtr(*volatile u<%= r.size %>, base_address + <%= r.address_offset %>);
        <%- when :mmio_int -%>
        pub const <%= r.name %> = @intToPtr(*volatile MmioInt(<%= r.size %>, u<%= r.bit_width %>), base_address + <%= r.address_offset %>);
        <%- else -%>
        pub const <%= r.name %> = @intToPtr(*volatile Mmio(<%= r.size %>, packed struct {
            <%- for f in r.fields -%>
            <%- if (f.enum and f.enum.values and f.enum.values.length > 0) -%>
            pub const <%= f.enum.name.titlecase %> = enum(u<%= f.bit_width %>) {
                <%- for v in f.enum.values -%>
                <%= v.name.underscore.identifier %> = <%= v.value %>, // <%= v.desc %>
                <%- end -%>
            };
            <%- end -%>
            <%- end -%>
            <%- for f in r.fields -%>
            <%= f.name %>: <%- if f.enum -%><%= f.enum.name.titlecase %><%- else -%>u<%= f.bit_width %><%- end -%>,<%- if f.desc or f.enum -%> // <%= f.desc %> <%- if f.enum %> (u<%= f.bit_width %>) <%- end -%> <%- end %>
            <%- end -%>
        }), base_address + <%= r.address_offset %>);
        <%- end -%>
        <%- end -%>
    };
    <%- end -%>
};

  EOF
  puts ERB.new(tmpl, trim_mode: '-').result(binding)
end

puts "// this file was generated by cgen/registers.rb"
generate peripherals

# experiment with zig naming convention for registers
# peripherals.map do |p|
#   p.name.downcase!
#   p.registers.map do |r|
#     r.name.downcase! unless r.name == "OR"
#     r.fields.map { |f| f.name.downcase! unless f.name == "ALIGN" }
#   end
# end
# generate peripherals

puts File.read("data/registers_footer.zig") unless $is_test


    # <%- for p in peripherals -%>
    # <%- for r in p.registers -%>
    # <%- for f in r.fields -%>
    # <%- next unless (f.enum and f.enum.values and f.enum.values.length > 0) -%>
    # pub const <%= f.enum.name %> = enum {
    #     <%- for v in f.enum.values -%>
    #     <%= v.name %> = <%= v.value %>,
    #     <%- end -%>
    # };
    # <%- end -%>
    # <%- end -%>
    # <%- end -%>
